TYPEMAP

LMDB::Core::Env T_PTR
LMDB::Core::EnvInfo T_PTR
LMDB::Core::Txn T_PTR
LMDB::Core::Stat T_PTR
LMDB::Core::Cursor T_PTR
LMDB::Core::TxnNullable T_PTR_N
MDB_dbi     unsigned int
MDB_valIn   T_mdb_val_in
MDB_valInOut   T_mdb_val_in_out
MDB_cursor_op T_UV

INPUT

T_PTR_N
        if(!SvTRUE($arg)) {
            $var = ($type) NULL;
        } else {
            $var = INT2PTR($type,SvIV($arg));
        }

T_mdb_val_in
    if(SvPOK($arg)) {
        $var.mv_data = SvPV($arg, $var.mv_size);
    } else {
        $var.mv_data = NULL;
        $var.mv_size = 0;
    }

T_mdb_val_in_out
    MDB_val dummy_$var;
    if($arg == &PL_sv_undef) {
        $var = NULL;
    } else {
        if(SvPOK($arg)) {
            dummy_$var.mv_data = SvPV($arg, dummy_$var.mv_size);
        }
        $var = &dummy_$var;
    }

####################################################################################
OUTPUT
T_mdb_val_in_out
    if($var && RETVAL == MDB_SUCCESS && $arg != &PL_sv_undef) {
        if(!SvPOK($arg)) {
            sv_setpvn($arg,"",0);
        }
        SvPV_free($arg);
        SvPVX($arg) = dummy_$var.mv_data;
        SvLEN($arg) = 0;
        SvCUR($arg) = dummy_$var.mv_size;
        SvUTF8_off($arg);
        SvREADONLY_on($arg);
        SvTAINTED_on($arg);
    }
